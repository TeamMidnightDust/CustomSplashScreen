plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id "me.shedaniel.unified-publishing" version "0.1.+"
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { url = "https://api.modrinth.com/maven" }
}
loom {
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}"
	include "maven.modrinth:midnightlib:${project.midnightlib_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	it.options.release = 21
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

ext {
	releaseChangelog = {
		def changes = new StringBuilder()
		changes << "## Custom Splash Screen v$project.version for $project.minecraft_version\n[View the changelog](https://www.github.com/TeamMidnightDust/CustomSplashScreen/commits/)"
		def proc = "git log --max-count=1 --pretty=format:%s".execute()
		proc.in.eachLine { line ->
			def processedLine = line.toString()
			if (!processedLine.contains("New translations") && !processedLine.contains("Merge") && !processedLine.contains("branch")) {
				changes << "\n- ${processedLine.capitalize()}"
			}
		}
		proc.waitFor()
		return changes.toString()
	}
}

unifiedPublishing {
	project {
		displayName = "CustomSplashScreen v$project.version - Fabric $project.minecraft_version"
		releaseType = "$project.release_type"
		changelog = releaseChangelog()
		gameVersions = []
		gameLoaders = ["fabric","quilt"]
		mainPublication remapJar
		relations {
			includes {
				curseforge = "midnightlib"
				modrinth = "midnightlib"
			}
		}

		var CURSEFORGE_TOKEN = project.findProperty("CURSEFORGE_TOKEN") ?: System.getenv("CURSEFORGE_TOKEN")
		if (CURSEFORGE_TOKEN != null) {
			curseforge {
				token = CURSEFORGE_TOKEN
				id = rootProject.curseforge_id
				gameVersions.addAll "Java 21", project.minecraft_version
			}
		}

		var MODRINTH_TOKEN = project.findProperty("MODRINTH_TOKEN") ?: System.getenv("MODRINTH_TOKEN")
		if (MODRINTH_TOKEN != null) {
			modrinth {
				token = MODRINTH_TOKEN
				id = rootProject.modrinth_id
				version = "$project.version"
				gameVersions.addAll project.minecraft_version
			}
		}
	}
}